---
title: "Class 13 RNA Seq Intro"
author: "Isabella Ruud PID: A59016138"
format: pdf
toc: true
---

In today's class we will analyze some published RNA seq experiments where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al., 2014)

We will use the DESeq2 package for the heavy lifting in a little bit, but first let's read the data and get to know how things work

## Data import

There are two datasets needed for this type of analysis:
  -countData:the transcript abundances (read counts per gene)
  -colData: metadata about the columns in countData (ie experimental set up)

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

>Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

There are 38694 genes in the dataset

>Q2. How many control experiments do we have? 

```{r}
table(metadata$dex)
```
```{r}
sum(metadata$dex == "control")
```

There are 4 control experiments


Make sure that the columns of the count data are the same as the id column in the metadata
```{r}
all(colnames(counts) == metadata$id)
```

## Mean counts per condition

Let's find the average gene counts (ie rows) for control and treated conditions (ie columns)

Find the control samples and calculate the mean counts per gene across these samples

-extract all "control" columns/experiments
-then find the row-wise average for these columns

>Q3.How would you make the above code in either approach more robust? Is there a function that could help here?

Can use rowMeans

```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[,control.inds]
control.mean <- rowMeans(control.counts)


```


>Q4. Do the same for the treated columns to produce treated.mean

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[,treated.inds]
treated.mean <- rowMeans(treated.counts)
```

Let's store these mean values all in one dataframe

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

>Q5 Create a scatter plot showing the mean of the treated samples against the mean of the control samples. 

```{r}
plot(meancounts)
```


```{r}
library(ggplot2)

ggplot(meancounts) + 
  aes(x = control.mean, y = treated.mean) +
  geom_point(alpha = 0.3) +
  labs(x = "control", y = "treated") 
```

>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

log = "xy"
```{r}
plot(meancounts, log = "xy")
```

```{r}
ggplot(meancounts) + 
  aes(x = control.mean, y = treated.mean) +
  geom_point(alpha = 0.3) +
  labs(x = "control", y = "treated") +
  scale_x_continuous(trans="log2") +
  scale_y_continuous(trans="log2")
```

## Log fold chage 

We most often work in log2 units - why? Because the interpretation is much more straightforward.

```{r}
log2(20/20)
```

```{r}
log2(20/40)
```

```{r}
log2(40/20)
```

Calculate log2 fold change (log2fc) of treated/control

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)
head(meancounts)
```

There are some weird numbers in the log2fc values like -Inf and NaN all because there are zero count genes. I need to filter these out (ie remove them) before going any further

```{r}
to.keep <- rowSums(meancounts[,1:2] == 0) == 0
mycounts <- meancounts[to.keep,]
```


How many non zero count genes do we have now?

```{r}
nrow(mycounts)
```

21817 genes are left

>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The arr.ind argument makes it so that the places where there is a true value is returned as a matrix (ie both row and column position). The first column contains the genes to remove and unique() is called to make sure that if a gene has two 0s, it does not try to double-remove it


>Q8 How many genes are up regulated at a log2fc > 2?

```{r}
sum(mycounts$log2fc>2)
paste(sum(mycounts$log2fc>2) / nrow(mycounts) * 100, "%")
```
250 genes

>Q9 How many genes are down regulated at a log2fc < -2?

```{r}
sum(mycounts$log2fc < (-2))
paste(sum(mycounts$log2fc < (-2)) / nrow(mycounts) * 100, "%")
```

367 genes

>Q10 Do you trust these results? 

No, because with over 21,000 genes, there are going to be genes that randomly have different log2 fold changes so you want to find the genes that are actually differentially regulated and have statistical significance


## DESeq analysis

To do this analysis properly, we can use the BioConductor package DESeq2

```{r}
#! message: false
library(DESeq2)
```

Like most BioConductor packages, DESeq wants its input in a very particular format

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
head(res)
```

### Save results
Save out the results to CSV file

```{r}
write.csv(res, file = "myresults.csv")
```

### Volcano plots

Let's make a common summary plot of our results
Our main results here are the log2 fold change and adjusted p value

```{r}
plot(res$log2FoldChange, res$padj)
```

We need to transform the p value axis here so we can see the data we actually care about (small p value)

```{r}
plot(res$log2FoldChange, log(res$padj))
```

To make the plot better, we need to flip the plot on the y axis so the most significant values are towards the top

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

This is our standard volcano plot, but let's make it more interesting in ggplot. We can use color to highlight the most important subset of transcripts with a log2FC > +2 and < -2 that have a P value < 0.05. We will need a custom color vector for this

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange >= 2] <- "red"
mycols[res$log2FoldChange <= -2] <- "red"
mycols[res$padj >= 0.05] <- "gray"

```


```{r}
ggplot(res) +
  aes(log2FoldChange, -log(padj)) +
  geom_point(col=mycols) +
  labs(title = "Summary Volcano Plot", x = "Log2(Fold Change)", y = "-Log(P-value)") +
  theme_bw() +
  geom_vline(xintercept = c(-2,2), col = "darkgray") +
  geom_hline(yintercept = -log(0.05), col = "darkgray")
  
```

## Adding annotation data

At the minute all we know about the genes in our dataset is their ENSEMBLE database id

```{r}
head(rownames(res))
```

We can use a set of BioConductor packages to amp these ENSEMBLE ids to things like GENE SYMBOL, REFSEQ id, ENTREZ id, etc. In other words, what each gene is called in different databases that I might use to work with for downstream packages.

I install these packages with BiocManager::install() 

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```
the different formats that I can covert IDs between include:
```{r}
columns(org.Hs.eg.db)
```
We can use the mapIds() function to do this

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL", # The format of our genenames
                     column="SYMBOL", # The new format we want to add
                     multiVals="first")
head(res)
```

>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL", # The format of our genenames
                     column="ENTREZID", # The new format we want to add
                     multiVals="first")
```
```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL", # The format of our genenames
                     column="GENENAME", # The new format we want to add
                     multiVals="first")
```
```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL", # The format of our genenames
                     column="UNIPROT", # The new format we want to add
                     multiVals="first")
```


```{r}
head(res)
```

```{r}
write.csv(res, file = "myresults_annotated.csv")
```


## Pathway Analysis

Let's use KEGG to see which pathway my gene sets overlap with (ie highlight the biology that may be influenced by the dex drug treatment)

We will use the following packages: BiocManager::install( c("pathview", "gage", "gageData") )

The gage function wants as input a "named vector of importance"

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
```


```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```


```{r}
head(keggres$less)
```
We can have a quick look at one of the highlighted pathways 

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)


























